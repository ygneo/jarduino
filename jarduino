#!/usr/bin/env python
import json
import sys
import warnings
import serial
import serial.tools.list_ports
from string import Template
from subprocess import call


def output_serial_input():
    serial_device = serial.Serial(arduino_device(), 9600, timeout=2)
    while 1:
        try:
            print serial_device.readline().strip()
        except KeyboardInterrupt:
            serial_device.close()
            exit(1)


def upload():
    device = arduino_device()
    call("MONITOR_PORT={} make".format(device), shell=True)
    call("MONITOR_PORT={} make upload".format(device), shell=True)


def read_code_configuration():
    with open("jarduino.json", "r") as f:
        code_configuration = json.loads(f.read())

    return code_configuration


def generate():
    code_configuration = read_code_configuration()
    with open("jarduino.tpl", "r") as f:
        template = Template(f.read())
    with open("jarduino.ino", "w") as f:
        f.write(template.substitute(**code_configuration))


def arduino_device():
    arduino_ports = []
    for port in serial.tools.list_ports.comports():
        is_arduino_device = 'Arduino' in port.description or \
                            'Arduino' in port.manufacturer
        if is_arduino_device:
            arduino_ports.append(port.device)

    if not arduino_ports:
        raise IOError("No Arduino found")

    if len(arduino_ports) > 1:
        warnings.warn('Multiple Arduinos found - using the first.')

    print "[x] Arduino found in {}\n".format(arduino_ports[0])

    return arduino_ports[0]


if len(sys.argv) > 2 or len(sys.argv) == 1:
    print "Usage: {} [upload|read|generate]".format(sys.argv[0])
    exit(1)

mode = sys.argv[1]

if mode == "read":
    output_serial_input()
elif mode == "upload":
    upload()
elif mode == "generate":
    generate()
